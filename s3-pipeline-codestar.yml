AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to build and push Docker images to S3 from GitHub.

Parameters:
  CodeBuildtName:
    Description: The CodeBuildProject name
    Type: String
    Default: github-to-s3-build
  CodeBuildRoleName:
    Description: The CodeBuildRole name
    Type: String
    Default: codebuild-role-for-s3
  ConnectionArn:
    Description: The CodeConnections ARN for your source repository.
    Type: String
  FullRepositoryId:
    Description: The full repository ID to use with your CodeConnections connection.
    Type: String
    Default: "Kyrieee-ops/s3-cicd"
  BranchName:
    Description: The branch name to use with your CodeConnections connection.
    Type: String
    Default: main
  CodePipelineName:
    Description: The CodePipeline pipeline name that will deploy to your CloudFormation stack.
    Type: String
    Default: s3-codepipeline
  CodePipelineRoleName:
    Description: The CodePipeline role name 
    Type: String
    Default: codepipeline-role-for-s3
  CodePipelineSourceActionRoleName:
    Description: The CodePipeline source action role name
    Type: String
    Default: codepipeline-source-from-github-role-for-s3
  BucketNameBackup:
    Type: String
    Default: s3-cicd-backup
    
Resources:
# ------------------------------------------------------------#
# CodeBuild
# buildspecを実行するプロジェクトを定義する
# GitHubに保存されているソースコードのビルドを行いArtifact
# ------------------------------------------------------------#
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${CodeBuildtName}
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            build:
              commands:
              - echo aws s3 sync....
              - aws s3 sync . s3://${BucketNameBackup}-${AWS::AccountId}/template --delete

      Environment:
        ComputeType: BUILD_GENERAL1_SMALL # ビルドする際のリソースを指定する(AWS公式に環境環境タイプの容量一覧があるので参考にする)
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER # ビルドの実行タイプをLinuxベースのコンテナを使用する
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE # build成果物が不要な場合はNO_ARTIFACTSを指定する
# ------------------------------------------------------------#
# CodeBuildが使用するロールの定義
# ------------------------------------------------------------#
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${CodeBuildRoleName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - codebuild.amazonaws.com
            Action: sts:AssumeRole

# ------------------------------------------------------------#
# CodeBuildRoleにアタッチするポリシー
# カスタマーインラインポリシー
# ------------------------------------------------------------#
  CodeBuildPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuildProject}:*"
          - Action:
              - codebuild:StartBuild
              - codebuild:BatchGetBuilds
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
              - s3:DeleteObject
            Effect: Allow
            Resource: 
              - !GetAtt CodeBuildProject.Arn
              # - !ImportValue s3bucketbackupArn 
              - !GetAtt s3bucketbackup.Arn # s3バケットリソースの論理名でs3バケットのARNを取得する
              - !Join
                - '/'
                # - - !ImportValue s3bucketbackupArn
                - - !GetAtt s3bucketbackup.Arn
                  - '*'
      PolicyName: CodeBuildPolicy
      Roles:
        - !Ref CodeBuildRole

# ------------------------------------------------------------#
# CodePipeline
# ------------------------------------------------------------#
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref s3bucketbackup
        Type: S3
      # ExecutionMode: PARALLEL # Code Pipelineが実行中であっても並列実行を制御するためにキューに入る設定
      Name: !Sub ${CodePipelineName}
      # PipelineType: V2
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: CodeConnections
              ActionTypeId: # Sourceコードの取得を行うフェーズを定義
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection # CodeStarSourceConnectionを使用してGitHubと連携をする
                Version: '1'
              Configuration:
                ConnectionArn: !Sub ${ConnectionArn} # 事前にCodeConnectionArnを作成しておく必要があるSource
                FullRepositoryId: !Sub ${FullRepositoryId}
                BranchName: !Sub ${BranchName}
                # PollForSourceChanges: false  # 自動トリガーを無効化 -> ここをfalseに設定しておかないとCloudFormation deploy時にCodePipelineが起動してしまうため
              OutputArtifacts:
                - Name: SourceOutput # ソースステージの出力 -> 指定されたリポジトリからコードを取得しそれをSourceOutputという名前で出力アーティファクトとして生成する
              RoleArn: !GetAtt CodePipelineSourceActionRole.Arn
              RunOrder: 1 
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              OutputArtifacts:
                - Name: BuildOutput        
    DependsOn:
      - CodePipelineRoleDefaultPolicy
# ------------------------------------------------------------#
# CodePipelineが使用するロールを指定する
# codepipelineに対してAssumeRole -> 要するにCodePipelineが権限を引き受けることができる
# CloudFormationでロール名を指定しない場合、スタック名 + 論理ID + ランダムな文字列で生成する
# ------------------------------------------------------------#  
  CodePipelineRole: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${CodePipelineRoleName}
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: '2012-10-17'

# ------------------------------------------------------------#
# CodePipelineRoleにアタッチするポリシー
# CodePipelineが指定のS3バケットに対する操作を行うことができる
# ------------------------------------------------------------#
  CodePipelineRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: # CodePipelineが指定のS3バケットに対して操作を行えるようにしている
              - s3:Abort*
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
              - s3:PutObjectAcl
              - s3:PutObjectVersionAcl
            Effect: Allow
            # 以下ではS3バケットレベルの操作とオブジェクトレベルの操作を許可するために指定している
            # `Join`でS3バケットに`/*`のように結合し、`arn:aws:s3:::my-bucket/*`を指定
            # つまり対象のS3バケットの全てのオブジェクトに対して許可をする、ということを示している
            Resource:
              # - !ImportValue s3bucketbackupArn
              - !GetAtt s3bucketbackup.Arn # s3バケットリソースの論理名でs3バケットのARNを取得する
              - !Join
                - '/'
                # - - !ImportValue s3bucketbackupArn
                - - !GetAtt s3bucketbackup.Arn
                  - '*'

          - Action: # CodePipelineに対してCodeBuildの操作権限を付与する
            - codebuild:StartBuild
            - codebuild:BatchGetBuilds
            - codebuild:BatchGetProjects
            Effect: Allow
            Resource: !GetAtt CodeBuildProject.Arn

          - Action: sts:AssumeRole # あくまでCodePipelineがCodeBuildプロジェクトのロールを引き受ける許可
            Effect: Allow
            Resource: 
            - !GetAtt CodeBuildRole.Arn
            - !GetAtt CodePipelineSourceActionRole.Arn
        Version: '2012-10-17'
      PolicyName: CodePipelineRoleDefaultPolicy
      Roles:
        - !Ref CodePipelineRole

# ------------------------------------------------------------#
# CodePipelineのソースアクションに必要なロールを定義
# GitHubからコードを取得するアクション
# ------------------------------------------------------------#
  CodePipelineSourceActionRole: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${CodePipelineSourceActionRoleName}
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root # 使用しているAWSアカウントに対して権限を引き受けることができる
        Version: '2012-10-17'
# ------------------------------------------------------------#
# ソースアクション(コードを取得するアクション)が必要とする権限を定義する
# ------------------------------------------------------------#
  CodePipelineSourceActionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: codestar-connections:UseConnection # CodePipelineがGitHubのソースプロバイダーに接続し、GitHubからソースを取得する
            Effect: Allow
            Resource: !Sub ${ConnectionArn} # AWS ⇔ GitHub接続名のARNを参照し、GitHubとの接続を使用してコードを取得が可能となる
          # CodePipelineがGitHubから取得したファイルをS3へアップロードするために必要なActionの操作権限を定義
          - Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:PutObject
              - s3:PutObjectLegalHold # 必要に応じてオブジェクトの保持ポリシーを設定する場合に必要
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging # アップロードしたファイルにタグを付与する場合に必要
            # `arn:aws:s3:::${s3bucketbackup}`と`arn:aws:s3:::${s3bucketbackup}/*`イコール
            Effect: Allow
            Resource:
              - !GetAtt s3bucketbackup.Arn
              - !Join
                - '/'
                - - !GetAtt s3bucketbackup.Arn
                  - '*'
          - Action:
              - s3:PutObjectAcl
              - s3:PutObjectVersionAcl
            Effect: Allow
            Resource: !Join
              - /
              - - !GetAtt s3bucketbackup.Arn
                - '*'
        Version: '2012-10-17'
      PolicyName: CodePipelineSourceActionRoleDefaultPolicy
      Roles:
        - !Ref CodePipelineSourceActionRole
# ------------------------------------------------------------#
# S3　backup
# ------------------------------------------------------------# 
  s3bucketbackup:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: Private
      BucketName: !Sub ${BucketNameBackup}-${AWS::AccountId}
      PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
      VersioningConfiguration: 
        Status: Suspended
      BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
              BucketKeyEnabled: true
      Tags:
        - Key: Name
          Value: !Sub ${BucketNameBackup}-${AWS::AccountId}

  s3BucketPolicyBackup:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref s3bucketbackup
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Action:
            - "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:${AWS::Partition}:s3:::${BucketNameBackup}-${AWS::AccountId}/*"
            Principal: 
              AWS: !Sub arn:${AWS::Partition}:iam::674078804300:user/Administrator

Outputs:
     s3bucketbackup:
      Value: !Ref s3bucketbackup
      Export:
        Name: s3bucketbackup  
     s3BucketArn:
      Value: !Sub arn:aws:s3:::${s3bucketbackup}
      Export: 
        Name: s3bucketbackupArn